/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.rpc.api.user;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2023-04-09")
public class APIResponse implements org.apache.thrift.TBase<APIResponse, APIResponse._Fields>, java.io.Serializable, Cloneable, Comparable<APIResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("APIResponse");

  private static final org.apache.thrift.protocol.TField RESPONSEMESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("responsemessage", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESPONSE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseCode", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new APIResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new APIResponseTupleSchemeFactory();

  public java.lang.String responsemessage; // required
  public int responseCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESPONSEMESSAGE((short)1, "responsemessage"),
    RESPONSE_CODE((short)2, "responseCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPONSEMESSAGE
          return RESPONSEMESSAGE;
        case 2: // RESPONSE_CODE
          return RESPONSE_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESPONSECODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPONSEMESSAGE, new org.apache.thrift.meta_data.FieldMetaData("responsemessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESPONSE_CODE, new org.apache.thrift.meta_data.FieldMetaData("responseCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(APIResponse.class, metaDataMap);
  }

  public APIResponse() {
  }

  public APIResponse(
    java.lang.String responsemessage,
    int responseCode)
  {
    this();
    this.responsemessage = responsemessage;
    this.responseCode = responseCode;
    setResponseCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public APIResponse(APIResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResponsemessage()) {
      this.responsemessage = other.responsemessage;
    }
    this.responseCode = other.responseCode;
  }

  public APIResponse deepCopy() {
    return new APIResponse(this);
  }

  @Override
  public void clear() {
    this.responsemessage = null;
    setResponseCodeIsSet(false);
    this.responseCode = 0;
  }

  public java.lang.String getResponsemessage() {
    return this.responsemessage;
  }

  public APIResponse setResponsemessage(java.lang.String responsemessage) {
    this.responsemessage = responsemessage;
    return this;
  }

  public void unsetResponsemessage() {
    this.responsemessage = null;
  }

  /** Returns true if field responsemessage is set (has been assigned a value) and false otherwise */
  public boolean isSetResponsemessage() {
    return this.responsemessage != null;
  }

  public void setResponsemessageIsSet(boolean value) {
    if (!value) {
      this.responsemessage = null;
    }
  }

  public int getResponseCode() {
    return this.responseCode;
  }

  public APIResponse setResponseCode(int responseCode) {
    this.responseCode = responseCode;
    setResponseCodeIsSet(true);
    return this;
  }

  public void unsetResponseCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESPONSECODE_ISSET_ID);
  }

  /** Returns true if field responseCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESPONSECODE_ISSET_ID);
  }

  public void setResponseCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESPONSECODE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RESPONSEMESSAGE:
      if (value == null) {
        unsetResponsemessage();
      } else {
        setResponsemessage((java.lang.String)value);
      }
      break;

    case RESPONSE_CODE:
      if (value == null) {
        unsetResponseCode();
      } else {
        setResponseCode((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPONSEMESSAGE:
      return getResponsemessage();

    case RESPONSE_CODE:
      return getResponseCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESPONSEMESSAGE:
      return isSetResponsemessage();
    case RESPONSE_CODE:
      return isSetResponseCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof APIResponse)
      return this.equals((APIResponse)that);
    return false;
  }

  public boolean equals(APIResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_responsemessage = true && this.isSetResponsemessage();
    boolean that_present_responsemessage = true && that.isSetResponsemessage();
    if (this_present_responsemessage || that_present_responsemessage) {
      if (!(this_present_responsemessage && that_present_responsemessage))
        return false;
      if (!this.responsemessage.equals(that.responsemessage))
        return false;
    }

    boolean this_present_responseCode = true;
    boolean that_present_responseCode = true;
    if (this_present_responseCode || that_present_responseCode) {
      if (!(this_present_responseCode && that_present_responseCode))
        return false;
      if (this.responseCode != that.responseCode)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResponsemessage()) ? 131071 : 524287);
    if (isSetResponsemessage())
      hashCode = hashCode * 8191 + responsemessage.hashCode();

    hashCode = hashCode * 8191 + responseCode;

    return hashCode;
  }

  @Override
  public int compareTo(APIResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetResponsemessage()).compareTo(other.isSetResponsemessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponsemessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responsemessage, other.responsemessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResponseCode()).compareTo(other.isSetResponseCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseCode, other.responseCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("APIResponse(");
    boolean first = true;

    sb.append("responsemessage:");
    if (this.responsemessage == null) {
      sb.append("null");
    } else {
      sb.append(this.responsemessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseCode:");
    sb.append(this.responseCode);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class APIResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public APIResponseStandardScheme getScheme() {
      return new APIResponseStandardScheme();
    }
  }

  private static class APIResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<APIResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, APIResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPONSEMESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.responsemessage = iprot.readString();
              struct.setResponsemessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESPONSE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.responseCode = iprot.readI32();
              struct.setResponseCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, APIResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.responsemessage != null) {
        oprot.writeFieldBegin(RESPONSEMESSAGE_FIELD_DESC);
        oprot.writeString(struct.responsemessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESPONSE_CODE_FIELD_DESC);
      oprot.writeI32(struct.responseCode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class APIResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public APIResponseTupleScheme getScheme() {
      return new APIResponseTupleScheme();
    }
  }

  private static class APIResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<APIResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, APIResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResponsemessage()) {
        optionals.set(0);
      }
      if (struct.isSetResponseCode()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetResponsemessage()) {
        oprot.writeString(struct.responsemessage);
      }
      if (struct.isSetResponseCode()) {
        oprot.writeI32(struct.responseCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, APIResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.responsemessage = iprot.readString();
        struct.setResponsemessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.responseCode = iprot.readI32();
        struct.setResponseCodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

